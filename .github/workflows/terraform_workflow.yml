name: Deploy Kittygram

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Select the Terraform action'
        required: true
        default: 'plan'
        options:
          - plan
          - apply
          - destroy

env:
  YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
  YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
  YC_TOKEN: ${{ secrets.YC_TOKEN }}
  AWS_DEFAULT_REGION: "ru-central1"

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Setup Yandex Cloud CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          mkdir ~/.yc
          echo "${{ secrets.YC_ACCOUNT_KEY }}" | base64 -d > ~/.yc/key.json

      - name: Terraform Init
        run: terraform init -backend-config="access_key=${{ secrets.ACCESS_KEY }}" -backend-config="secret_key=${{ secrets.SECRET_KEY }}"
        working-directory: ./terraform

      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: terraform plan -var="cloud_id=$YC_CLOUD_ID" -var="folder_id=$YC_FOLDER_ID" -var="vm_user=ubuntu" -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
        working-directory: ./terraform

      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: terraform apply -auto-approve -var="cloud_id=$YC_CLOUD_ID" -var="folder_id=$YC_FOLDER_ID" -var="vm_user=ubuntu" -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
        working-directory: ./terraform

      - name: Get VM IP
        if: ${{ github.event.inputs.action == 'apply' }}
        id: get_ip
        run: |
          echo "ip=$(terraform output -raw external_ip)" >> $GITHUB_ENV
          terraform output -raw external_ip > vm_ip.txt
        working-directory: ./terraform

      - name: Save IP as artifact
        if: ${{ github.event.inputs.action == 'apply' }}
        uses: actions/upload-artifact@v4
        with:
          name: vm_ip
          path: ./terraform/vm_ip.txt

      - name: Wait until VM is ready
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          echo "Waiting for VM..."
          IP=$(terraform output -raw external_ip)
          until curl -sf http://$IP/healthcheck; do
            sleep 10
          done

      - name: Terraform Destroy
        if: ${{ github.event.inputs.action == 'destroy' }}
        run: terraform destroy -auto-approve -var="cloud_id=$YC_CLOUD_ID" -var="folder_id=$YC_FOLDER_ID" -var="vm_user=ubuntu" -var="ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}"
        working-directory: ./terraform

  deploy:
    name: Deploy to remote server
    runs-on: ubuntu-latest
    needs: terraform
    if: ${{ github.event.inputs.action == 'apply' }}
    steps:
      - name: Download IP artifact
        uses: actions/download-artifact@v4
        with:
          name: vm_ip

      - name: Read IP from file
        id: read_ip
        run: echo "VM_IP=$(cat vm_ip.txt)" >> $GITHUB_ENV
    
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy application
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@$VM_IP << 'EOF'
          git clone https://github.com/thesandrex/kittygram-final.git ~/kittygram
          cd ~/kittygram
          sudo docker-compose -f docker-compose.production.yml pull
          sudo docker-compose -f docker-compose.production.yml down
          sudo docker-compose -f docker-compose.production.yml up -d
          sudo docker-compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
          sudo docker-compose -f docker-compose.production.yml exec -T backend python manage.py migrate
          EOF
